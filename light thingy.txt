Library ieee;
Use IEEE.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity light is
port(r,in in std_logic;
lop inout std_logic_vector(9 downto 0);
clk in std_logic_vector(9 downto 0);
red,y,g out std_logic);
end light;
architecture L of light is
signal x: std_logic_vector( 2 downto 0);
begin
Process(clk,r,lop,x)
begin
if (r = ‘1’) then
lop <= ‘0’;
x <= ‘0’
else
if rising_edge(clk) then
lop <= lop + 1;
else 
lop <= lop;
end if;
end if;
end process;
process(lop,x)
begin
if lop = ‘9’;
if x = ‘2’ then
x <= ‘0’
else
x <= x;
end if;
x <= x + 1 ;
else 
x <= x;
end if;
end process;
process (x)
begin
if x = ‘0’; then
red <= ‘1’;
y <= ‘0’;
g <= ‘0’;
elsif x = ‘1’ then
red <= ‘0’;
y <= ‘1’;
g <= ‘0’;
else
red <= ‘0’;
y <= ‘0’;
g <= ‘1’;
end if;
end process;




tb
________________


Library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity tb is
end tb;
architecture b of tb is
component light is
port(r in std_logic;
lop inout std_logic_vector(9 downto 0);
clk in std_logic_vector(9 downto 0);
red,y,g out std_logic);
end component;
signal r, red,y,g: std_logic;
signal lop,clk: std_logic_vector(9 downto 0);
signal x: std_logic_vector( 2 downto 0);
begin
uut: light port map ( r<= r, red <=red, y<=y,g<=g,lop<=lop,clk<=clk,x<=x);
cproc:process
wait for 10 ns;
clk <= ‘0’;
wait for 10 ns;
clk <= ‘1’;
wait for 10 ns;
end process;
rproc:process
wait for 100 ns;
r <= ‘0’;
wait for 100 ns;
r <= ‘1’;
wait for 100 ns;
end process;
end B;